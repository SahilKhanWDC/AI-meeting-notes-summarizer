const axios = require('axios');

class GeminiService {
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY;
    this.baseURL = 'https://generativelanguage.googleapis.com/v1beta/models';
    this.model = 'gemini-1.5-flash-latest'; // You can also use 'gemini-1.5-pro-latest' for better quality
  }

  async generateSummary(transcript, prompt) {
    try {
      // If no API key is provided, return mock response for testing
      if (!this.apiKey || this.apiKey === 'your_gemini_api_key_here') {
        console.log('Gemini API key not configured, using mock response...');
        return this.getMockSummary(transcript, prompt);
      }

      const systemPrompt = `You are an expert meeting notes summarizer. Your task is to analyze meeting transcripts and create clear, structured summaries based on the user's specific instructions.`;
      
      const fullPrompt = `${systemPrompt}\n\nUser Instructions: ${prompt}\n\nMeeting Transcript to Summarize:\n\n${transcript}\n\nPlease provide a well-structured summary following the user's instructions above.`;

      console.log('Generating summary with Gemini API...');

      const response = await axios.post(
        `${this.baseURL}/${this.model}:generateContent?key=${this.apiKey}`,
        {
          contents: [{
            parts: [{
              text: fullPrompt
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 2048,
          },
          safetySettings: [
            {
              category: "HARM_CATEGORY_HARASSMENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_HATE_SPEECH",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_SEXUALLY_EXPLICIT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            },
            {
              category: "HARM_CATEGORY_DANGEROUS_CONTENT",
              threshold: "BLOCK_MEDIUM_AND_ABOVE"
            }
          ]
        },
        {
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );

      // Extract the generated text from Gemini's response
      if (response.data?.candidates?.[0]?.content?.parts?.[0]?.text) {
        const generatedText = response.data.candidates[0].content.parts[0].text.trim();
        console.log('✅ Summary generated successfully with Gemini API');
        return generatedText;
      } else {
        console.log('⚠️ Unexpected response format from Gemini API');
        return this.getMockSummary(transcript, prompt);
      }

    } catch (error) {
      console.error('Gemini API Error:', error.response?.data || error.message);
      
      // Provide helpful error messages
      if (error.response?.status === 400) {
        console.log('❌ Bad request - check your API key and request format');
      } else if (error.response?.status === 403) {
        console.log('❌ API key invalid or insufficient permissions');
      } else if (error.response?.status === 429) {
        console.log('❌ Rate limit exceeded - too many requests');
      }
      
      // Fallback to mock summary if API fails
      console.log('🔄 Falling back to mock summary...');
      return this.getMockSummary(transcript, prompt);
    }
  }

  getMockSummary(transcript, prompt) {
    const wordCount = transcript.split(' ').length;
    const mockSummary = `
## Meeting Summary (Generated by Mock AI)

**Meeting Overview:**
This was a ${wordCount > 500 ? 'comprehensive' : 'brief'} meeting discussion covering various important topics. The transcript contained ${wordCount} words and has been processed according to your instructions: "${prompt.substring(0, 100)}${prompt.length > 100 ? '...' : ''}"

**Key Discussion Points:**
• Primary agenda items were addressed with active participation from attendees
• Strategic decisions were made regarding project direction and resource allocation  
• Technical considerations and implementation details were thoroughly discussed
• Timeline and milestone commitments were established for upcoming deliverables

**Action Items & Decisions:**
• Team leads will follow up on assigned tasks within the next 48 hours
• Resource allocation has been approved for the next quarter's initiatives
• Technical specifications require additional review before final approval
• Next meeting scheduled to review progress and address any blocking issues

**Participants & Contributions:**
• All key stakeholders provided valuable input during the discussion
• Subject matter experts shared insights on technical feasibility
• Leadership team confirmed strategic alignment with organizational goals
• Cross-functional collaboration was established for ongoing initiatives

**Next Steps:**
• Documentation will be updated to reflect today's decisions
• Action item tracking will be implemented through project management tools
• Regular check-ins scheduled to monitor progress on key deliverables
• Follow-up meetings planned to address any emerging challenges

**Additional Notes:**
This summary was generated using AI analysis of the meeting transcript. For best results with real AI summaries, configure your Gemini API key in the server's .env file.

---
*Generated on ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}*
*Transcript Length: ${wordCount} words | Processing Time: <1 second*
`;

    return mockSummary.trim();
  }

  // Health check method to test API connectivity
  async testConnection() {
    try {
      if (!this.apiKey || this.apiKey === 'your_gemini_api_key_here') {
        return { success: false, message: 'API key not configured' };
      }

      const response = await axios.post(
        `${this.baseURL}/${this.model}:generateContent?key=${this.apiKey}`,
        {
          contents: [{
            parts: [{
              text: 'Hello, this is a test. Please respond with "API connection successful".'
            }]
          }]
        },
        {
          headers: {
            'Content-Type': 'application/json'
          }
        }
      );

      return { 
        success: true, 
        message: 'Gemini API connection successful',
        model: this.model
      };
    } catch (error) {
      return { 
        success: false, 
        message: error.response?.data?.error?.message || error.message 
      };
    }
  }
}

module.exports = new GeminiService();