const nodemailer = require('nodemailer');

// Create email transporter
const createTransporter = () => {
  return nodemailer.createTransport({
    host: process.env.EMAIL_HOST || 'smtp.gmail.com',
    port: process.env.EMAIL_PORT || 587,
    secure: false, // true for 465, false for other ports
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS
    }
  });
};

const sendEmail = async (req, res) => {
  try {
    const { summary, recipients } = req.body;

    // Validation
    if (!summary || summary.trim().length === 0) {
      return res.status(400).json({ 
        error: 'Summary content is required' 
      });
    }

    if (!recipients || !Array.isArray(recipients) || recipients.length === 0) {
      return res.status(400).json({ 
        error: 'At least one recipient email is required' 
      });
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    const invalidEmails = recipients.filter(email => !emailRegex.test(email.trim()));
    
    if (invalidEmails.length > 0) {
      return res.status(400).json({ 
        error: 'Invalid email addresses found',
        invalidEmails 
      });
    }

    // Check if email credentials are configured
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      console.log('Email credentials not configured, simulating email send...');
      return res.json({
        success: true,
        message: `Email simulated successfully to ${recipients.length} recipient(s)`,
        recipients,
        note: 'Configure EMAIL_USER and EMAIL_PASS in .env file to send real emails'
      });
    }

    const transporter = createTransporter();

    // Email content
    const mailOptions = {
      from: `"Meeting Notes" <${process.env.EMAIL_USER}>`,
      to: recipients.join(', '),
      subject: `Meeting Summary - ${new Date().toLocaleDateString()}`,
      html: `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>Meeting Summary</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .header { background: #f4f4f4; padding: 20px; text-align: center; }
            .content { padding: 20px; }
            .summary { background: #f9f9f9; padding: 15px; border-left: 4px solid #007bff; }
            .footer { text-align: center; color: #666; font-size: 12px; padding: 20px; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>ðŸ“‹ Meeting Summary</h1>
            <p>Generated on ${new Date().toLocaleDateString()}</p>
          </div>
          <div class="content">
            <div class="summary">
              ${summary.replace(/\n/g, '<br>')}
            </div>
          </div>
          <div class="footer">
            <p>This summary was generated by AI-powered Meeting Notes Summarizer</p>
          </div>
        </body>
        </html>
      `,
      text: `Meeting Summary - ${new Date().toLocaleDateString()}\n\n${summary}`
    };

    console.log(`Sending email to ${recipients.length} recipient(s)...`);

    await transporter.sendMail(mailOptions);

    res.json({
      success: true,
      message: `Email sent successfully to ${recipients.length} recipient(s)`,
      recipients,
      sentAt: new Date().toISOString()
    });

  } catch (error) {
    console.error('Email sending error:', error);
    res.status(500).json({ 
      error: 'Failed to send email',
      message: error.message 
    });
  }
};

module.exports = {
  sendEmail
};